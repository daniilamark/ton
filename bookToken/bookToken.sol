
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract bookToken {

    struct Token{
        string title;
        string author;
        uint numPages;
    }

    Token[] tokensArr;
    mapping (uint => uint) tokenToOwner;

    modifier checkOwnerAndAccept {
        require(msg.pubkey() == tvm.pubkey(), 100);
		tvm.accept();
		_;
	}
    modifier checkTitleMatches(string title) {
        for (uint256 index = 0; index < tokensArr.length; index++) {
            require(tokensArr[index].title != title, 101);
        }
		tvm.accept();
		_;
	}

    function createToken(string _title, string author, uint numPages) public checkTitleMatches(_title){
        tokensArr.push(Token(_title, author, numPages));
        uint keyAsLastNum = tokensArr.length - 1;
        tokenToOwner[keyAsLastNum] = msg.pubkey();
    }
    
    function getTokenOwner(uint tokenId) public view returns(uint){
        tvm.accept();
        return tokenToOwner[tokenId];
    } 

    function getTokenInfo(uint tokenId) public view returns (string tokenTitle, string tokenAuthor, uint tokenNumPages){
        // tvm.accept();
        tokenTitle = tokensArr[tokenId].title;
        tokenAuthor = tokensArr[tokenId].author;
        tokenNumPages = tokensArr[tokenId].numPages;
    }

    function changeOwner(uint tokenId, uint pubKeyOfNewOwner) public checkOwnerAndAccept {
        tokenToOwner[tokenId] = pubKeyOfNewOwner;
    }

    function changePower(uint tokenId, uint power) public pure checkOwnerAndAccept {
        //tokensArr[tokenId].power = power;
    }
    
    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }
}
