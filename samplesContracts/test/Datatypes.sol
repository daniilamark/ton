
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract Datatypes {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint32 public timestamp;
    uint8 public shortInt;
    int256 public longInt;
    int public my256Int;

    int[] myArray =[int256(0), 0];
    //---------------------------------------------------------------

    struct student{
        uint8 age;
        string firstName;
        string lastName;
    }
    //---------------------------------------------------------------

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
        //---------------------------------------------------------------
        int[] myArray2;
        myArray2[0] = 77;

        uint16[3]  myArray3 = [uint16(1), 2, 3];
        //---------------------------------------------------------------

        myArray3.length;
    
        if(myArray2.empty()){
            myArray2.push(55);
        }
        else{
            myArray2.pop();
        }
        
        //---------------------------------------------------------------
        // byte myByte = "a" ;
        // byte[] bytesArray;
        bytes anotherBytesArray = "abcde";

        anotherBytesArray.length;
        // bytes slice = anotherBytesArray[1:3];
        // bytes slice2 = anotherBytesArray[1:];
        // bytes slice3 = anotherBytesArray[:3];

        //---------------------------------------------------------------
        string sampleString = "teststroke";
        sampleString.substr(1, 5); // find a substring
        sampleString.append("test"); // add a string to the end
        sampleString.find(byte('t')); // search for characters by string 
        stoi(sampleString); // conversion to integer
        //---------------------------------------------------------------

        student myStydent = student(21, "Ivan", "Petrov");

        // uint8 age = myStydent.age;
        // string name = myStydent.lastName;

        //---------------------------------------------------------------

        mapping (string => string) assocArray;
        assocArray["pasport189291"] = "Ivanov Ivan";

        // mapping (student => uint8) studentMark;
        // studentMark[myStydent] = 9;

        timestamp = now;
    }
}
