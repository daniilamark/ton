
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract TaskList {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint32 public timestamp;
    uint public taskCount = 0;

    struct Task{
        uint id;
        string task;
        uint32 time;
        bool isDone;
    }

    mapping (uint8 => Task) public tasks;

    event TaskCreated(
        uint id,
        string content,
        bool completed
    );

    event TaskCompleted(
        uint id,
        bool completed
    );  
    

    constructor() public {
        createTask("Default task");

        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
        timestamp = now;
    }

    // Updates variable `timestamp` with current blockchain time.
    function touch() external {
        // Each function that accepts external message must check that
        // message is correctly signed.
        require(msg.pubkey() == tvm.pubkey(), 102);
        // Tells to the TVM that we accept this message.
        tvm.accept();
        // Update timestamp
        timestamp = now;
    }

    function sendValue(address dest, uint128 amount, bool bounce) public view {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        // It allows to make a transfer with arbitrary settings
        dest.transfer(amount, bounce, 0);
    }

    
    function createTask(string _content) public  {
        taskCount ++;
        timestamp = now;
        tasks[uint8(taskCount)] = Task(uint8(taskCount), _content, timestamp, false);
        emit TaskCreated(taskCount, _content, false);
    }

    function toggleCompleted(uint _id) public  {
        Task _task = tasks[_id];
        _task.completed = !_task.completed;
        tasks.id[_id] = _task;
        emit TaskCompleted(_id, _task.completed);
    }

    
}
